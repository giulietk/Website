[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Website",
    "section": "",
    "text": "Edits by K Siegmund"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#step-0-look-at-existing-content",
    "href": "index.html#step-0-look-at-existing-content",
    "title": "Website",
    "section": "Step 0: Look at existing content",
    "text": "Step 0: Look at existing content\nClone the website repository at https://github.com/ksiegmund/PM566-lab12-example with example project website content into a NEW directory for the lab, e.g. \"week12-lab\".\nNote: we are not initializing this as a git repository, we will do that in Step 1. We are just downloading the contents.\nmkdir ~/week12-lab\ngit clone https://github.com/ksiegmund/PM566-lab12-example\nThen open the file PM566-lab12-example.Rproj. For MacOS you can do that through command line using\nopen PM566-lab12-example.Rproj\nOtherwise, you can manually open the file from your directory.\nOnce you have it opened:\n\nCheck out the contents of this repository. What files does it contain?\nTake a few moments to compare the contents of this repository to the final website at https://ksiegmund.github.io/PM566-lab12-example"
  },
  {
    "objectID": "index.html#step-1-create-project-website-directory",
    "href": "index.html#step-1-create-project-website-directory",
    "title": "Website",
    "section": "Step 1: Create project website directory",
    "text": "Step 1: Create project website directory\nCreate and go to the directory you want to create your website in, e.g. \"PM566-final-project\", and initialize git.\nIn command line:\nmkdir ~/PM566-final-project\ncd ~/PM566-final-project\ngit init"
  },
  {
    "objectID": "index.html#step-2-create-and-add-essential-files-from-scratch",
    "href": "index.html#step-2-create-and-add-essential-files-from-scratch",
    "title": "Website",
    "section": "Step 2: Create and add essential files from scratch",
    "text": "Step 2: Create and add essential files from scratch\nRecall from lecture that the minimum requirements for an R Markdown website are:\n\nindex.Rmd: contains the content for the website homepage\n_site.yml: contains metadata for the website\n\nCreate these essential files, as well as a README.md, add all to git queue, and commit to your website repository.\nNote: You can use the echo command in command line to initialize the files (in MacOS you can also use the touch command):\necho My PM566 Final Project Website &gt; README.md\necho &gt; _site.yml\necho &gt; index.Rmd\ngit add --all\ngit commit -m \"initalizing repository\""
  },
  {
    "objectID": "index.html#step-3-create-.rproj-file",
    "href": "index.html#step-3-create-.rproj-file",
    "title": "Website",
    "section": "Step 3: Create .Rproj file",
    "text": "Step 3: Create .Rproj file\nCreate an R Project file using RStudio IDE:\nGo to RStudio IDE &gt; File &gt; New Project &gt; Existing Directory\nThe R Project is useful because RStudio will recognize your project as a website, and provide appropriate build tools.\nNote: After creating the R Project and initial files, you may need to close the project and reopen it before R will recognize it as a website and show the appropriate build tools."
  },
  {
    "objectID": "index.html#step-4-edit-the-content",
    "href": "index.html#step-4-edit-the-content",
    "title": "Website",
    "section": "Step 4: Edit the content",
    "text": "Step 4: Edit the content\n\nStep 4.1: Edit the YAML file\nEdit the _site.yml file to include the metadata, layout, and theme you want for your website.\nFirst let’s take a look at a basic example of a _site.yml file for a website with one page:\nname: \"my-website\"\nnavbar:\n  title: \"My Website\"\n  left:\n    - text: \"Home\"\n      href: index.html\noutput:\n  html_document:\n    theme: cosmo\nThis is the minimum you need to include in your _site.yml.\nNow let’s take a look at the _site.yml from the website repository you downloaded into \"week12-lab\". It looks like this:\nname: \"my-website\"\noutput_dir: \".\"\nnavbar:\n  title: \"PM566 Final Project\"\n  left:\n    - text: \"Home\"\n      href: index.html\n    - text: \"Lab 12\"\n      href: 12-lab.html\n  right:\n    - icon: fa-github fa-lg\n      href: https://github.com/USCbiostats/PM566\n    - text: \"PM566 Home\"\n      href: https://uscbiostats.github.io/PM566/\noutput:\n  html_document:\n    theme: cosmo\n    include:\n      after_body: footer.html\n    css: styles.css\nInspecting this, and the output on the completed website at https://ksiegmund.github.io/PM566-lab12-example, how do you add links to internal webpages? How do you add links to external websites? How do you add icons?\nInternal webpage links are in the left section. External websites are in the right section. Aded icons are in the output section.\nNote: recall that the output_dir field indicates which directory to copy site content into (\"_site\" is the default if none is specified). It can be \".\" to keep all content within the root website directory alongside the source code.\nNote: Preview themes here and play around with different options. Themes are easy to change even after you have added content.\nNow your task is to create a YAML for your website that includes only the essential components for your website. Either copy the content of the simple _site.yml into your own _site.yml file in your website directory PM566-final-project, or replicate it yourself line by line.\nNote: YAML language is very picky so make sure your content is formatted appropriately. If you are not sure, either look up the appropriate text in the reference guide, search google, or copy from a website you know works!\n\n\n\nStep 4.2: Edit internal .Rmd files\nEdit and create .Rmd files that contain your website content, which will produce the html pages of your website when you knit them.\nFor example, the index.Rmd could look like this:\n---\ntitle: \"PM566 Final Project\"\nauthor: \"Your Name\"\noutput: \n    html_document:\n        toc: TRUE\n        toc_float: TRUE\n---\n\nThis is my PM566 Final Project website.\n\nThe toc specifies whether there is a table of contents, and toc_float provides the option to float the table of contents to the left of the main document content. The floating table of contents will always be visible even when the document is scrolled. There are other options for how to display the toc in R Markdown HTML output which you can read about here.\n\nAfter you are done with your index.Rmd file, knit it to check the output. Either click the Knit option in the toolbar or in the console type rmarkdown::render_site(\"index.Rmd\"). This will render the output into a file index.html which you can check out by opening the file in your directory:"
  },
  {
    "objectID": "index.html#step-5-build-website",
    "href": "index.html#step-5-build-website",
    "title": "Website",
    "section": "Step 5: Build website",
    "text": "Step 5: Build website\nNow we have the content and layout setup, we can build the website! This can be done in two ways:\n\nBuild tab &gt; Build Website\nin the console: rmarkdown::render_site()\n\nrmarkdown has created all the additional files you need for your website. Check them out in your directory. Most importantly, the index.html file provides a preview of the site, which you can look at in a browser as above:\nNote: As you make changes, you should re-render (or equivalently, re-build) the website. Recall from lecture that RStudio supports “live preview” of changes that you make to supporting files within your website (e.g., CSS, JavaScript, .Rmd partials, R scripts, and YAML config files), but this only rebuilds the active page. So once you are happy with the results of rendering you should make sure to rebuild the entire site using rmarkdown::render_site() to ensure that all pages inherit your changes.\n\n\nStyles\nYou will see that your R Markdown website comes with a style class, specified by your chosen theme specified in your YAML (or the default theme if not chosen). You can also modify your site using CSS style sheets. As discussed in lecture, styles can be modified in 3 ways: in-line with HTML, placing a style section in your HTML document, defining the CSS in an external file that is then referenced as a link in your HTML. Feel free to play around with the external style sheet styles.css that came with the example website.\n\n\n\nCommit!\nDon’t be afraid of commitment! Add your changes as you go along.\ncd ~/PM566-final-project\ngit add --all\ngit commit -m \"Rendered website\""
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Website",
    "section": "Overview",
    "text": "Overview\n\nCreate project on GitHub\nInitialize project on Git\nPush project files to the GitHub repository for your project\nDeploy the website by enabling GitHub pages for the repository"
  },
  {
    "objectID": "index.html#step-6-create-project-on-github",
    "href": "index.html#step-6-create-project-on-github",
    "title": "Website",
    "section": "Step 6: Create project on GitHub",
    "text": "Step 6: Create project on GitHub\nCreate an online (remote) repository for your project using GitHub"
  },
  {
    "objectID": "index.html#step-7-initialize-project-with-git",
    "href": "index.html#step-7-initialize-project-with-git",
    "title": "Website",
    "section": "Step 7: Initialize project with git",
    "text": "Step 7: Initialize project with git\nIn command line:\nAdd the remote using git remote add\ngit remote add origin https://github.com/YOUR_GITHUB_NAME/YOUR_PROJECT_NAME.git\nOptionally, use the commands git status and git remote -v to check out the status."
  },
  {
    "objectID": "index.html#step-8-push-website-content-to-remote",
    "href": "index.html#step-8-push-website-content-to-remote",
    "title": "Website",
    "section": "Step 8: Push website content to remote",
    "text": "Step 8: Push website content to remote\nPush the changes to the remote using git push\ngit push -u origin main\nNote In 2020 Github changed its default repository name from “master” to “main”, so if you’re creating a new repository after 2020, it will named “main”."
  },
  {
    "objectID": "index.html#step-9-deploy-the-website",
    "href": "index.html#step-9-deploy-the-website",
    "title": "Website",
    "section": "Step 9: Deploy the website",
    "text": "Step 9: Deploy the website\nEnable GitHub pages for the repository by going to the repository’s Settings &gt; GitHub Pages. For the branch option (left button), you’ll switch from the selected “none” to the “main branch” folder. For the folder option (right button) (/(root) vs. /docs), you’ll choose /(root) if you included the parameter output_dir: \".\" in your YAML. Otherwise, the output directory will default to the /docs folder, and you should select that as the source folder. Then hit Save:"
  },
  {
    "objectID": "index.html#step-10-preview-content",
    "href": "index.html#step-10-preview-content",
    "title": "Website",
    "section": "Step 10: Preview content!",
    "text": "Step 10: Preview content!\nIt’s live! Go to the website at www.YOUR_GH_NAME.github.io/YOUR_PROJECT_NAME/ (the website should appear to you when you click the appropriate setting in GitHub Pages)\nWOO HOO!"
  },
  {
    "objectID": "index.html#step-11-source-processing-code",
    "href": "index.html#step-11-source-processing-code",
    "title": "Website",
    "section": "Step 11: Source processing code",
    "text": "Step 11: Source processing code\nFirst you can source any necessary code, meaning run it. For example, let’s use the COVID-19 data from the NYT we explored in week 11. In the example repository you downloaded into \"week12-lab\", we have provided the code process_covid_data.R which goes through the first steps we carried out in the lab of downloading and processing the data. To source this code, in your index.Rmd file, include a code chunk with the source(process_COVID_data.R) command:\n\nsource(\"process_COVID_data.R\")\n\n\nNote: Make sure that you include the following libraries and formatting code at the beginning of your index.Rmd file, which will allow you to run the source(\"process_COVID_data.R\") code:\n```{r setup, message=FALSE, echo=FALSE, warning=FALSE}\nlibrary(data.table)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\nlibrary(knitr)\n```\nYou may also want to include some code chunk options for your whole document using opts_chunk$set(), for example the options we specified in the 12-lab.Rmd file:\n```\n# Initialize code chunk options\nopts_chunk$set(\n  warning = FALSE,\n  message = FALSE,\n  eval=TRUE,\n  echo = TRUE,\n  cache = FALSE,\n  fig.width = 7, \n  fig.align = 'center',\n  fig.asp = 0.618,\n  out.width = \"700px\")\n```"
  },
  {
    "objectID": "index.html#step-12-add-code-for-visuals",
    "href": "index.html#step-12-add-code-for-visuals",
    "title": "Website",
    "section": "Step 12: Add code for visuals",
    "text": "Step 12: Add code for visuals\nThen you can add some code chunks to create the interactive visuals you want to include. I will add some code to create a couple of the plotly figures we created in lab. I am naming each plot but not outputting them here, because I will want to do that in independent code chunks as we will see in the next step.\nNote: Code chunks do not require names, but it can be useful to name them because they can be referenced elsewhere in the document. Note that if you do name them (like this one: plot1), you will need to be sure to give each an independent name because code chunks cannot share the same name.\n\nsource(\"process_COVID_data.R\")\np1_scatter &lt;- cv_states_today |&gt; \n  plot_ly(x = ~pop_density, y = ~deathsper100k,\n          type = 'scatter', mode = 'markers', color = ~state,\n          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),\n          hoverinfo = 'text',\n          text = ~paste( paste(state, \":\", sep=\"\"), paste(\" Cases per 100k: \", per100k, sep=\"\") , paste(\" Deaths per 100k: \",\n                        deathsper100k, sep=\"\"), sep = \"&lt;br&gt;\")) |&gt;\n  layout(title = \"Population-normalized COVID-19 deaths vs. population density\",\n                  yaxis = list(title = \"Deaths per 100k\"), xaxis = list(title = \"Population Density\"),\n         hovermode = \"compare\")\n\n# filter out \"District of Columbia\"\ncv_states_today_scatter &lt;- cv_states_today |&gt; filter(state!=\"District of Columbia\")\n\np2_scatter &lt;- cv_states_today_scatter |&gt; \n  plot_ly(x = ~pop_density, y = ~deathsper100k,\n          type = 'scatter', mode = 'markers', color = ~state,\n          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),\n          hoverinfo = 'text',\n          text = ~paste( paste(state, \":\", sep=\"\"), paste(\" Cases per 100k: \", per100k, sep=\"\") , paste(\" Deaths per 100k: \",\n                        deathsper100k, sep=\"\"), sep = \"&lt;br&gt;\")) |&gt;\n  layout(title = \"Population-normalized COVID-19 deaths vs. population density\",\n                  yaxis = list(title = \"Deaths per 100k\"), xaxis = list(title = \"Population Density\"),\n         hovermode = \"compare\")\n\n\nNow, create 2 figures of your own, either using the code above, the code from last week’s lab, or creating new figures based on the data created by the process_COVID_data.R code."
  },
  {
    "objectID": "index.html#step-13-display-figures-in-tabs",
    "href": "index.html#step-13-display-figures-in-tabs",
    "title": "Website",
    "section": "Step 13: Display figures in tabs",
    "text": "Step 13: Display figures in tabs\nCreate tabs to display each figure. We do that using the following R Markdown language using the {.tabset} option:\n\n## Showcasing plots {.tabset}\n\n### Tab 1\n\n```{r echo=FALSE}\np1_scatter\n```\n\n### Tab 2\n\n```{r echo=FALSE}\np2_scatter\n```\n\n## {-}\nThe {-} closes the tabs. Tabs work at multiple levels of hierarchy: ##, ###, and ####.\n\nThe output will look like this:\n\nFigure 1\n\n\n\n\n\n\n\n\nFigure 2"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Website",
    "section": "",
    "text": "Knit the page index.Rmd to check the output. It may take a bit longer now that we’re also processing the data from the NYT. (Recall from lecture we can do that once per session by inputting the global option opts_chunk$set(cache=TRUE))."
  },
  {
    "objectID": "index.html#step-14-update-website-content",
    "href": "index.html#step-14-update-website-content",
    "title": "Website",
    "section": "Step 14: Update website content",
    "text": "Step 14: Update website content\nYou’ve now made some edits to your website. To get the updates onto the live webpage, you need to re-render the site to create the HTML output from your .Rmd file edits, and push the updates to the remote GitHub repository:\n\nIn the R console: rmarkdown::render_site()\nPreview contents by looking at the index.html file in a browser\nAdd and push changes to remote from your website project repository locally (e.g. PM566-final-project):\n\ngit add --all\ngit commit -m \"interactive visuals\"\ngit push\nPreview your changes online at your website!\nNote: It may take up to 10 minutes for the content to render."
  }
]